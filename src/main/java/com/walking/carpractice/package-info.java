/**
 * Доработайте задачу, реализованную в рамках статей
 * <a href="https://github.com/KFalcon2022/lessons/blob/master/lessons/web-and-java-ee/147/Servlet%20API.%20ServletConfig.%20ServletContext.%20Listeners.md">147</a>
 * и
 * <a href="https://github.com/KFalcon2022/lessons/blob/master/lessons/web-and-java-ee/148/Servlet%20API.%20Filter.%20Filter%20chain.%20Request%20and%20response%20modification.md">148</a>
 * <p>
 * Необходимо добавить функциональность регистрации, аутентификации и авторизации пользователей:
 * <p>
 * 1. Создайте сущность User со свободным набором атрибутов. В базовом сценарии можно ограничиться логином и паролем.
 * Обеспечьте хранение информации о пользователях в БД;
 * <p>
 * 2. Пароль в БД должен храниться в виде хеша. Реализовать хеширование можно как с использованием одного из алгоритмов,
 * реализованных в java.security, так и с использованием внешней библиотеки на ваш вкус. В наиболее простой
 * реализации в качестве хеша можно использовать результат `Object#hashcode()`;
 * <p>
 * 3. Реализуйте сервлет, ответственный за регистрацию пользователей. Запрос должен содержать все необходимые для
 * регистрации атрибуты пользователя, включая пароль. Если пользователь с указанным логином существует - необходимо
 * возвращать ошибку;
 * <p>
 * 4. Реализуйте сервлет, ответственный за логин пользователя. Должен принимать логин и пароль, в случае, если
 * пользователь с указанным логином не существует или пароль неверный - возвращать сообщение о неудачном логине;
 * <p>
 * 5. Реализуйте сервлет, ответственный за логаут пользователя;
 * <p>
 * 6. Доступ к ранее созданный сервлетам должен быть ограничен и предоставляться только авторизованным пользователям.
 * В противном случае должен возвращаться код ответа 401 (Unauthorized).
 * <p>
 * 7. Любая полезная нагрузка в теле запроса или ответа должна передаваться в виде JSON-объектов.
 *
 * @see java.security
 */
package com.walking.carpractice;
